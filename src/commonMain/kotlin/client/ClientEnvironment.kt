/*
* Copyright Â© 2020, Concordant and contributors.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
* associated documentation files (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute,
* sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or
* substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
* NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package client

import client.utils.CServiceAdapter
import client.utils.ActiveTransaction
import crdtlib.crdt.DeltaCRDT
import crdtlib.utils.ClientUId
import crdtlib.utils.SimpleEnvironment

/**
* This class represents a Concordant client environment.
* @property session the session attached to this environment.
* @property uid the client unique identifier.
*/
class ClientEnvironment(val session: Session, uid: ClientUId) : SimpleEnvironment(uid) {

    /**
     * On read handler called after a getter function on an object.
     * @param obj the object on which getter was called.
     */
    override fun onRead(obj: DeltaCRDT) {
        // Assert session and collection are opened
        if (this.session.isClosed) throw RuntimeException("The session has been closed.")
        val collection = this.session.openedCollections.values.elementAtOrNull(0)
            ?: throw RuntimeException("There is no opened collection.")

        // Assert we are in a transaction.
        if (ActiveTransaction == null) throw RuntimeException("Code should be executed in a transaction")

        // Assert the object is opened
        val infos = collection.openedObjects[obj] ?: throw RuntimeException("This object has been closed.")

        // Assert the object unique identifier
        val objectUId = infos.first

        // Get distant version of the object
        CServiceAdapter.getObject(session.getDbName(), session.getServiceUrl(), objectUId, obj)
    }

    /**
     * On write handler called after an updater function on an object.
     * @param obj the object on which updater was called.
     * @param delta the delta generated by the updater function.
     */
    override fun onWrite(obj: DeltaCRDT, delta: DeltaCRDT) {
        // Assert session and collection are opened
        if (this.session.isClosed) throw RuntimeException("The session has been closed.")
        val collection = this.session.openedCollections.values.elementAtOrNull(0)
            ?: throw RuntimeException("There is no opened collection.")

        // Assert we are in a transaction.
        if (ActiveTransaction == null) throw RuntimeException("Code should be executed in a transaction")

        // Assert the object is opened
        val infos = collection.openedObjects[obj] ?: throw RuntimeException("This object has been closed.")

        // Assert the object is not in read-only mode
        val readOnly = infos.second
        if (readOnly) throw RuntimeException("This object has been opened in read-only mode.")

        // Get the object unique identifier
        val objectUId = infos.first

        // Push the new local version to backend
        CServiceAdapter.updateObject(session.getDbName(), session.getServiceUrl(), objectUId, obj)
    }
}
