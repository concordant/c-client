class Session {

  // Current consistency level
  private consistency: ConsistencyLevel

  // The client id
  private cliendId: CliendId

  // The attached service handler
  private serviceHandler: ServiceHandler

  Session(cid: ClientId) {
    this.clientId = cid
  }

  // c_begin_session
  static fun open(dbName: String, credentials: String): Session {
    clientId = ClientId()
    if (NOT SERVICE.open(dbName, credentials, clientId)) throw Exception
    this.serviceHandler = ServiceHandler()
    this.serviceHandler.run()
    return Session(clientId)
  }

  // c_pull_XX_view
  fun pull(type: ConsistencyLevel) {
    if (consistency != null AND consistency > type) throw Exception
    this.consistency = type
    for oid in Cache {
      crdt, v = SERVICE.getObject(oid)
      obj = Global.Cache.get(oid)
      obj.crdt = crdt
      Global.TxnEnv.updateSate(v)
    } 
  }

  // c_pull_XX_view(v)
  fun pull(type: ConsistencyLevel, vv: VersionVector) {
    if (view != null AND view.type > type) throw Exception
    if (vv < global.TxnEnv.getState()) throw Exception
    for oid in Cache {
      crdt, v = SERVICE.getObject(oid, vv)
      obj = Global.Cache.get(oid)
      obj.crdt = crdt
      Global.TxnEnv.updateSate(v)
    } 
  }
  
  // c_open_collection_read|write
  fun openCollection(cid: CollectionId, readOnly: Boolean): Collection {
    return Collection(cid)
  }

  // c_XX_txn
  fun beginTransaction(body: () -> Unit) {
    Transaction(body)
  }

  // c_end_session
  fun close() {
    SERVICE.close(clientId)
    this.serviceHandler.stop()
  }
}
