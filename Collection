class Collection {

  // The collection id
  private id: CollectionId

  // Is the collection open in read only mode
  private readOnly: Boolean

  // Static boolean used to ensure that only one collection is openned
  private static otherOpenned: Boolean = false

  Collection(cid: CollectionId, readOnly: Boolean) {
    if (Collection.otherOpenned == true) throw Exception
    Collection.otherOpenned = true
    this.id = cid
    this.readOnly = readOnly
  }

  // c_open_read|write<T>
  fun open<T>(oid: String, readOnly: Boolean, handler: NotificationHandler): T {
    if (this.readOnly AND NOT readOnly) throw Exception
    if (NOT Session.currentTransaction == null) throw Exception

    oid = CObjectId(this.id, oid, T)
    if (ActiveSession.cache.contains(oid)) return ActiveSession.cache.get(oid)

    crdt, v = SERVICE.getObject(oid, ActiveSession.txnEnv.getState())
    ActiveSession.txnEnv.updateSate(v)
    obj = CObject<T>(oid, crdt, readOnly)
    ActiveSession.cache.put(oid, obj)
    ActiveSession.handlers.put(oid, handler)
    return obj
  }

  // c_close_collection
  fun close() {
    if (NOT Session.currentTransaction == null) throw Exception
    SERVICE.unsubscribeAll()
    ActiveSession.cache.clear()
    ActiveSession.handlers.clear()
    Collection.otherOpenned = false
  }
}
